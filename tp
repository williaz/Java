Byte data type is an 8-bit signed two's complement integer.
Short data type is a 16-bit signed two's complement integer.
Int data type is a 32-bit signed two's complement integer.
Long data type is a 64-bit signed two's complement integer.
Float data type is a single-precision 32-bit IEEE 754 floating point
double data type is a double-precision 64-bit IEEE 754 floating point.
boolean data type represents one bit of information.
char data type is a single 16-bit Unicode character.

Local variables are declared in methods, constructors, or blocks. Access modifiers cannot be used for local variables. Local variables are implemented at stack level internally. There is no default value for local variables so local variables should be declared and an initial value should be assigned before the first use.
Instance variables are declared in a class, but outside a method, constructor or any block. When a space is allocated for an object in the heap, a slot for each instance variable value is created. Access modifiers can be given for instance variables. Instance variables have default values. For numbers the default value is 0, for Booleans it is false and for object references it is null. Values can be assigned during the declaration or within the constructor
Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block. There would only be one copy of each class variable per class, regardless of how many objects are created from it. 

Access Control Modifiers:
Visible to the package, the default. No modifiers are needed.
Visible to the class only (private).
Visible to the world (public).
Visible to the package and all subclasses (protected).

Non Access Modifiers:
The static modifier for creating class methods and variables
The final modifier for finalizing the implementations of classes, methods, and variables.
The abstract modifier for creating abstract classes and methods.
The synchronized and volatile modifiers, which are used for threads.

Category 	Operator 	Associativity 
Postfix 	() [] . (dot operator)	Left toright 
Unary 	++ - - ! ~	Right to left 
Multiplicative  	* / % 	Left to right 
Additive  	+ - 	Left to right 
Shift  	>> >>> <<  	Left to right 
Relational  	> >= < <=  	Left to right 
Equality  	== != 	Left to right 
Bitwise AND 	& 	Left to right 
Bitwise XOR 	^ 	Left to right 
Bitwise OR 	| 	Left to right 
Logical AND 	&& 	Left to right 
Logical OR 	|| 	Left to right 
Conditional 	?: 	Right to left 
Assignment 	= += -= *= /= %= >>= <<= &= ^= |= 	Right to left 

to use objects instead of primitive data types. In-order to achieve this Java provides wrapper classes. All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number. he Number class is part of the java.lang package. boxing unboxing

Character ch = new Character('a');

Using String's static format() method allows you to create a formatted string that you can reuse, as opposed to a one-time print statement. 

Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. 

int[] result = new int[list.length]; function(new int[]{3, 1, 2, 6, 4, 2});

Java provides the Date class available in java.util package, this class encapsulates the current date and time.

Checked exceptions: A checked exception is an exception that occurs at the compile time, these are also called as compile time exceptions. 

Unchecked exceptions: An Unchecked exception is an exception that occurs at the time of execution, these are also called as Runtime Exceptions, these include programming bugs, such as logic errors or improper use of an API.

Errors: These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. 

Generally when we use any resources like streams, connections etc.. we have to close them explicitly using finally block. 

All exceptions must be a child of Throwable.

if we have the class as a member of other class, then the inner class can be made private. And this is also used to access the private members of a class.

In Java, we can write a class within a method and this will be a local type. Like local variables, the scope of the inner class is restricted within the method. A method-local inner class can be instantiated only within the method where the inner class is defined. 

When a class implements an interface, you can think of the class as signing a contract, agreeing to perform the specific behaviors of the interface. If a class does not perform all the behaviors of the interface, the class must declare itself as abstract.

A class uses the implements keyword to implement an interface. The implements keyword appears in the class declaration following the extends portion of the declaration.

A class can extend only one class, but implement many interfaces. An interface can extend another interface, similarly to the way that a class can extend another class.
public interface Hockey extends Sports, Event

The condition in assert statement must be followed by a semi-colon.


Java Language Keywords:///

abstract	continue	for	new	switch
assert***	default	goto*	package	synchronized
boolean	do	if	private	this
break	double	implements	protected	throw
byte	else	import	public	throws
case	enum****	instanceof	return	transient
catch	extends	int	short	try
char	final	interface	static	void
class	finally	long	strictfp**	volatile
const*	float	native	super	while
*	 	not used
**	 	added in 1.2
***	 	added in 1.4
****	 	added in 5.0

OOP-------
A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.


When do you use Java's @Override annotation and why?
Use it every time you override a method for two benefits. Do it so that you can take advantage of the compiler checking to make sure you actually are overriding a method when you think you are. This way, if you make a common mistake of misspelling a method name or not correctly matching the parameters, you will be warned that you method does not actually override as you think it does. Secondly, it makes your code easier to understand because it is more obvious when methods are overwritten.

like wise in Object oriented programming Abstraction is a process process of hiding the implementation details from the user, only the functionality will be provided to the user.
Abstract classes may or may not contain abstract methods ie., methods with out body ( public void get(); )
But, if a class have at least one abstract method, then the class must be declared abstract.
If a class is declared abstract it cannot be instantiated.

Instead of curly braces an abstract method will have a semoi colon ( ; ) at the end.

Encapsulation is one of the four fundamental OOP concepts. The other three are inheritance, polymorphism, and abstraction.






